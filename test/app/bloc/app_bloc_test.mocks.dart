// Mocks generated by Mockito 5.0.17 from annotations
// in firebasestarter/test/app/bloc/app_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:auth/auth.dart' as _i4;
import 'package:firebasestarter/services/shared_preferences/local_persistance_interface.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [LocalPersistanceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalPersistanceService extends _i1.Mock
    implements _i2.LocalPersistanceService {
  MockLocalPersistanceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void>? setValue<T>(String? key, T? value) => (super.noSuchMethod(
      Invocation.method(#setValue, [key, value]),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>?);
  @override
  _i3.Future<T?> getValue<T>(String? key) =>
      (super.noSuchMethod(Invocation.method(#getValue, [key]),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  _i3.Future<bool>? removeValue(String? key) =>
      (super.noSuchMethod(Invocation.method(#removeValue, [key]))
          as _i3.Future<bool>?);
  @override
  _i3.Future<bool>? containsKey(String? value) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [value]))
          as _i3.Future<bool>?);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i4.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.UserEntity?> get onAuthStateChanged =>
      (super.noSuchMethod(Invocation.getter(#onAuthStateChanged),
              returnValue: Stream<_i4.UserEntity?>.empty())
          as _i3.Stream<_i4.UserEntity?>);
  @override
  _i3.Future<_i4.UserEntity?> currentUser() =>
      (super.noSuchMethod(Invocation.method(#currentUser, []),
              returnValue: Future<_i4.UserEntity?>.value())
          as _i3.Future<_i4.UserEntity?>);
  @override
  _i3.Future<_i4.UserEntity?> signInAnonymously() =>
      (super.noSuchMethod(Invocation.method(#signInAnonymously, []),
              returnValue: Future<_i4.UserEntity?>.value())
          as _i3.Future<_i4.UserEntity?>);
  @override
  _i3.Future<_i4.UserEntity?> signInWithEmailAndPassword(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithEmailAndPassword, [],
                  {#email: email, #password: password}),
              returnValue: Future<_i4.UserEntity?>.value())
          as _i3.Future<_i4.UserEntity?>);
  @override
  _i3.Future<_i4.UserEntity?> createUserWithEmailAndPassword(
          {String? name, String? lastName, String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#createUserWithEmailAndPassword, [], {
                #name: name,
                #lastName: lastName,
                #email: email,
                #password: password
              }),
              returnValue: Future<_i4.UserEntity?>.value())
          as _i3.Future<_i4.UserEntity?>);
  @override
  _i3.Future<void>? sendPasswordResetEmail({String? email}) =>
      (super.noSuchMethod(
              Invocation.method(#sendPasswordResetEmail, [], {#email: email}),
              returnValueForMissingStub: Future<void>.value())
          as _i3.Future<void>?);
  @override
  _i3.Future<_i4.UserEntity?> signInWithSocialMedia(
          {_i4.SocialMediaMethod? method}) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithSocialMedia, [], {#method: method}),
              returnValue: Future<_i4.UserEntity?>.value())
          as _i3.Future<_i4.UserEntity?>);
  @override
  _i3.Future<void>? signOut() => (super.noSuchMethod(
      Invocation.method(#signOut, []),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>?);
  @override
  _i3.Future<void>? deleteAccount() => (super.noSuchMethod(
      Invocation.method(#deleteAccount, []),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>?);
}
